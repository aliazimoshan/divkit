apply plugin: 'java-library'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: "kotlin-allopen"
apply from: "${project.projectDir}/../publish-java.gradle"
apply from: "${project.projectDir}/../div-tests-coverage.gradle"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

def generatorOutputDir = "build/generated/sources/java"

sourceSets {
    main {
        java {
            srcDir(generatorOutputDir)
        }
    }
    generator {
        java {
            srcDir("src/main/java")
            srcDir("src/generator/java")
        }
    }
}

def generateFunctionProvider = task "generateFunctionProvider"(type: JavaExec) {
    classpath = sourceSets.generator.runtimeClasspath
    main = "com.yandex.div.evaluable.function.BuiltinFunctionProviderGenerator"
    workingDir(generatorOutputDir)
    outputs.dir(generatorOutputDir)
}

tasks.named("compileKotlin").configure {
    dependsOn(generateFunctionProvider)
}

tasks.named("sourcesJar").configure {
    dependsOn(generateFunctionProvider)
}

task "test${testVariant.capitalize()}UnitTest" {
    dependsOn test
}

task replJar(type: Jar, dependsOn: "testClasses") {
    from "$buildDir/classes/kotlin/test"
    from "$buildDir/classes/kotlin/main"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Main-Class': 'com.yandex.div.evaluable.repl.EvaluableRepl'
    }
    archiveClassifier = "repl"
}

allOpen {
    annotation("com.yandex.div.evaluable.internal.Mockable")
}

dependencies {
    implementation libs.javax
    compileOnly libs.json

    generatorImplementation libs.kotlin.stdlib
    generatorImplementation libs.javax
    generatorCompileOnly libs.json
    generatorImplementation libs.kotlinpoet

    testImplementation libs.json
    testImplementation libs.junit
    testImplementation libs.mockito.core
    testImplementation libs.mockito.kotlin
}
